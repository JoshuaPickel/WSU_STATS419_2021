handShake(n=5,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=10,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=2,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=3,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=2,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=3,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
c = rep("blue",780)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = c, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=10,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = rainbow(number_of_handShakes), edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=40,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = rainbow(number_of_handShakes), edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=40,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = rainbow(number_of_handShakes), edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=2,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000 || floor(n) != n)
{
return("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3,edge.color = "blue", edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=10,plotMe = TRUE)
library(igraph)
handShake(n=40,plotMe = TRUE)
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
library(igraph)
handShake(n=40,plotMe = TRUE)
library(igraph)
handShake(n=20,plotMe = TRUE)
library(igraph)
handShake(n=8,plotMe = TRUE)
library(igraph)
handShake(n=40,plotMe = TRUE)
library(igraph)
handShake(n=10,plotMe = TRUE)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
library(fmsb)
data = as.data.frame(matrix( c(75,50,70,40,25,10,20,5) , ncol=8))
colnames(data) = c("Computer Science","Statistics","Math","Visualization","Final Work Product","Version Control","EDA","Data Collection")
data = rbind(rep(100,8) , rep(0,8) , data)
data2 = as.data.frame(matrix( c(5,6,4,4,6) , ncol=5))
colnames(data2) = c("Leadership","Loyal","Dedication","Critical Thinking","Honesty")
data2 = rbind(rep(6,5) , rep(0,5) , data2)
par(mfrow=c(1,2))
par(mar = c(2,0,2,0))
radarchart( data  , axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=3 ,
cglcol="grey", cglty=1, axislabcol="red", cglwd=2,
vlcex=.7,
title = "Skill Mastry in Percent"
)
par(mar = c(2,0,2,0))
radarchart( data2  , axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=3 ,
cglcol="grey", cglty=1, axislabcol="red", cglwd=2, caxislabels = seq(0,6,1.5),
vlcex=.7,
title = "Trait Ratings (0)Low-(6)High"
)
x = 3
class(x)
x = 3.0
class(x)
x = "3.0"
class(x)
isWholeNum = function(x)
{
if (class(x) != "numeric" )
{
stop("The value passed is not of class 'numeric'. Please check your entry.")
}
else
{
if (floor(x) == x)
{
return (TRUE)
}
else
{
return (FALSE)
}
}
}
isWholeNum(3)
isWholeNum = function(x)
{
if (class(x) != "numeric" )
{
stop("The value passed is not of class 'numeric'. Please check your entry.")
}
else
{
if (floor(x) == x)
{
return (TRUE)
}
else
{
return (FALSE)
}
}
}
isWholeNum(3.1)
isWholeNum = function(x)
{
if (class(x) != "numeric" )
{
stop("The value passed is not of class 'numeric'. Please check your entry.")
}
else
{
if (floor(x) == x)
{
return (TRUE)
}
else
{
return (FALSE)
}
}
}
isWholeNum("hello")
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/"
# Remote Github
github.remote = ""
if(which.github == "remote")
{
include.me = paste0( github.remote, "functions/functions-intro.R");
library(devtools);
source_url(include.me);
} else {
include.me = paste0( github.local, "functions/functions-intro.R");
source(include.me);
}
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:\_git_\github\JoshuaPickel\WSU_STATS419_2021"
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:\_git_\github\JoshuaPickel\WSU_STATS419_2021\functions\functions-intro.R"
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/"
# Remote Github
github.remote = ""
if(which.github == "remote")
{
include.me = paste0( github.remote, "functions/functions-intro.R");
library(devtools);
source_url(include.me);
} else {
include.me = paste0( github.local, "functions/functions-intro.R");
source(include.me);
}
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/"
# Remote Github
github.remote = ""
if(which.github == "remote")
{
include.me = paste0( github.remote, "functions/functions-intro.R");
library(devtools);
source_url(include.me);
} else {
print("hbere")
include.me = paste0( github.local, "functions/functions-intro.R");
source(include.me);
}
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/"
# Remote Github
github.remote = ""
library(devtools)
if(which.github == "remote")
{
include.me = paste0( github.remote, "functions/functions-intro.R");
library(devtools);
source_url(include.me);
} else {
include.me = paste0( github.local, "functions/functions-intro.R");
source(include.me);
}
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/"
# Remote Github
github.remote = ""
library(devtools)
if(which.github == "remote")
{
include.me = paste0( github.remote, "functions/functions-intro.R");
library(devtools);
source_url(include.me);
} else {
include.me = paste0( github.local, "functions/functions-intro.R");
source(include.me);
}
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
setwd("C:/_git_/github/JoshuaPickel/WSU_STATS419_2021")
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
setwd("C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R")
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R/"
source(github.local)
# github.JoshuaPickel
which.github = "local"
# Local Github
github.local = "C:/_git_/github/JoshuaPickel/WSU_STATS419_2021/functions/functions-intro.R"
source(github.local)
