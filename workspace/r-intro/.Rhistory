library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
install.packages('fmsb')
library(fmsb)
data = as.data.frame(matrix( c(75,50,70,40,25,10,20,5) , ncol=8))
colnames(data) = c("Computer Science","Statistics","Math","Visualization","Final Work Product","Version Control","EDA","Data Collection")
data = rbind(rep(100,8) , rep(0,8) , data)
data2 = as.data.frame(matrix( c(5,6,4,4,6) , ncol=5))
colnames(data2) = c("Leadership","Loyal","Dedication","Critical Thinking","Honesty")
data2 = rbind(rep(6,5) , rep(0,5) , data2)
par(mfrow=c(1,2))
par(mar = c(2,0,2,0))
radarchart( data  , axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=3 ,
cglcol="grey", cglty=1, axislabcol="red", cglwd=2,
vlcex=.7,
title = "Skill Mastry in Percent"
)
par(mar = c(2,0,2,0))
radarchart( data2  , axistype=1,
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=3 ,
cglcol="grey", cglty=1, axislabcol="red", cglwd=2, caxislabels = seq(0,6,1.5),
vlcex=.7,
title = "Trait Ratings (0)Low-(6)High"
)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
install.packages('tinytex')
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tinytex")
library(readr)
count_letters = function(file)
{
original = paste(readLines(file),collapse = "")
original = gsub(" ", "", original)
original = tolower(original)
original = gsub("[^A-Za-z]", "!", original)
original = strsplit(original, "")
res = as.data.frame(t(as.matrix(table(original))))
colnames(res)[colnames(res) =='!'] = "OTHER"
if (length(res) > 1)
{
res = res[,c(2:length(res),1)]
}
res
}
results_draft = count_letters('original.txt')
barplot(as.table(as.matrix(results_draft)), xlab = 'Letter',ylab = 'Frequency', title = "Letters in original draft")
# results_draft = count_letters('final.txt')
# barplot(as.table(as.matrix(results_draft)), xlab = 'Letter',ylab = 'Frequency')
#
library(readr)
count_letters = function(file)
{
original = paste(readLines(file),collapse = "")
original = gsub(" ", "", original)
original = tolower(original)
original = gsub("[^A-Za-z]", "!", original)
original = strsplit(original, "")
res = as.data.frame(t(as.matrix(table(original))))
colnames(res)[colnames(res) =='!'] = "OTHER"
if (length(res) > 1)
{
res = res[,c(2:length(res),1)]
}
res
}
results_draft = count_letters('original.txt')
barplot(as.table(as.matrix(results_draft)), xlab = 'Letter',ylab = 'Frequency', main = "Letters in original draft")
results_final = count_letters('final.txt')
barplot(as.table(as.matrix(results_final)), xlab = 'Letter',ylab = 'Frequency', main = "Letters in final draft")
path.github = "https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R";
path.github = "https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R";
handShake(n=40,plotMe = TRUE)
library(devtools)
install.packages('devtools')
library(devtools)
path.github = "https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R";
handShake(n=40,plotMe = TRUE)
install.packages('devtools')
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
handShake(n=40,plotMe = TRUE)
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
handShake(n=40,plotMe = TRUE)
library(igraph)
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
handShake(n=40,plotMe = TRUE)
library(igraph)
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
handShake(n=40,plotMe = TRUE)
library(devtools)
source_url("https://raw.githubusercontent.com/JoshuaPickel/WSU_STATS419_2021/main/functions/functions-intro/r-intro.R")
handSahke(n=5,plotMe = TRUE)
handShake(n=5,plotMe = TRUE)
library(igraph)
handShake = function(n=1, plotMe=FALSE)
{
if (n<=0 || n > 1000)
{
print("Not a valid number, number of people must be greater than 0, and less than 41 ")
}
else
{
number_of_handShakes = n*(n-1)/2
number_of_handShakes
if (plotMe == TRUE)
{
people = c()
for (i in 1:n)
{
node = paste0("Person",i)
people = c(people,node)
}
allPeople = combn(people,2)
graph = graph( edges = allPeople, directed = T)
plot(graph,edge.arrow.mode = 3, edge.arrow.size = .25,vertex.size = 25,vertex.color = "grey",
vertex.frame.color = "black", edge.color = rainbow(number_of_handShakes), layout = layout_in_circle )
}
}
sprintf("The number of handshakes between %i people is %i", n, number_of_handShakes)
}
handShake(n=5,plotMe = TRUE)
x = "hello"
y = "The word I just typed was %s",x
y = paste0("The word I just typed was %s",x)
y
y = paste0("The word I just typed was ",x)
y
x = 'original.txt'
gsub(".txt",x)
gsub(".txt","",x)
upper(x[1])
toupper(x[1])
x
toupper(x[[1])
count_letters = function(file)
{
original = paste(readLines(file),collapse = "")
original = gsub(" ", "", original)
original = tolower(original)
original = gsub("[^A-Za-z]", "!", original)
original = strsplit(original, "")
res = as.data.frame(t(as.matrix(table(original))))
colnames(res)[colnames(res) =='!'] = "OTHER"
if (length(res) > 1)
{
res = res[,c(2:length(res),1)]
}
title = paste("Letters In", file)
barplot(as.table(as.matrix(res)), xlab = 'Letter',ylab = 'Frequency', main = title)
res
}
count_letters('original.txt')
count_letters(original.txt)
count_letters(original.txt)
setwd("C:/_git_/WSU_STATS419_2021/workspace/r-intro")
count_letters(original.txt)
setwd("C:/_git_/WSU_STATS419_2021/workspace/r-intro")
count_letters(original.txt)
count_letters = function(file)
{
original = paste(readLines(file),collapse = "")
original = gsub(" ", "", original)
original = tolower(original)
original = gsub("[^A-Za-z]", "!", original)
original = strsplit(original, "")
res = as.data.frame(t(as.matrix(table(original))))
colnames(res)[colnames(res) =='!'] = "OTHER"
if (length(res) > 1)
{
res = res[,c(2:length(res),1)]
}
title = paste("Letters In", file)
barplot(as.table(as.matrix(res)), xlab = 'Letter',ylab = 'Frequency', main = title)
res
}
count_letters('original.txt')
count_letters(original.txt)
count_letters(final.txt)
count_letters(final.txt)
count_letters(final.txt)
final.txt
